Question: Implement different sorting techniques on Array.
Solution:
#include <stdio.h>
#include<stdlib.h>
//Implement different sorting techniques on Array.
void init(int a[],int n)
{
    printf("Reading the elements of the array of size %d: \n", n);
    printf("Enter %d integers: \n", n);
    for(int i=0;i<n;i++)
    {
        scanf("%d", &a[i]);
    }
}
void display(int a[], int n)
{
    printf("The elements in the array are:\n");
    for(int i=0;i<n;i++)
    {
        printf("%d\n", a[i]);
    }
}
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp= *yp;
    *yp= temp;
}
void bubble(int a[], int n)
{
    for(int i=0; i<n-1; i++)
    {
        for(int j=0; j<n-1-i; j++)
        {
            if(a[j+1]<a[j])
            {
                swap(&a[j+1], &a[j]);
            }
        }
    }
}
int partition(int a[], int low, int high)
{
    int pivot= a[high];
    int i= low-1;
    for(int j=low; j<high; j++)
    {
        if(a[j]<pivot)
        {
            i++;
            swap(&a[i], &a[j]);
        }
    }
    swap(&a[i+1], &a[high]);
    return i+1;
}
void quick(int a[], int low, int high)
{
    if(low<high)
    {
        int part= partition(a,low,high);
        quick(a, low, part-1);
        quick(a, part+1, high);
    }
}
void heapify(int a[], int n, int i)
{
    int largest=i;
    int left= 2*i +1;
    int right= 2*i +2;
    if(left < n && a[left]>a[largest])
    {
        largest= left;
    }
    if(right < n && a[right]>a[largest])
    {
        largest= right;
    }
    if(largest!= i)
    {
        swap(&a[i], &a[largest]);
        heapify(a,n,largest);
    }
}
void heap(int a[], int n)
{
    for (int i = n/2 -1 ;i>=0; i--)
    {
        heapify(a,n,i);
    }
    for(int i = n-1; i>=0; i--)
    {
        swap(&a[0],&a[i]);
        heapify(a,i,0);
    }
}
int main()
{
    int a[100],n,ch,flag=1;

    while(flag==1)
    {
        printf("-------------------------------------------------------------");
        printf("\nEnter the choice of the sorting to be done here:\n\n 1 for Bubble Sort\n 2 for Quick Sort\n 3 for Heap Sort\n\n");
        printf("-------------------------------------------------------------\n");
        scanf("%d", &ch);
        switch(ch)
        {
            case 1:
            {
                printf("Option Selected: 1. Bubble Sort\n");
                printf("Enter the size of the array:\n");
                scanf("%d", &n);
                init(a,n);
                display(a,n);
                printf("Before Bubble Sort,");
                display(a,n);
                bubble(a,n);
                printf("After Bubble Sort,");
                display(a,n);
                break;
            }
            case 2:
            {
                printf("Option Selected: 2. Quick Sort\n");
                printf("Enter the size of the array:\n");
                scanf("%d", &n);
                init(a,n);
                display(a,n);
                printf("Before Quick Sort,");
                display(a,n);
                quick(a,0,n-1);
                printf("After Quick Sort,");
                display(a,n);
                break;
            }
            case 3:
            {
                printf("Option Selected: 3. Heap Sort\n");
                printf("Enter the size of the array:\n");
                scanf("%d", &n);
                init(a,n);
                display(a,n);
                printf("Before Heap Sort,");
                display(a,n);
                heap(a,n);
                printf("After Heap Sort,");
                display(a,n);
                break;
            }
            default:
                printf("Invalid Choice!\n");
        }
        printf("\n-------------------------------------------------------------\n");
        printf("!!!! PRESS 1 TO CONTINUE, OTHERWISE ANY OTHER KEY TO EXIT !!!");
        printf("\n-------------------------------------------------------------\n");
        scanf("%d", &flag);
    }
    return 0;
}
