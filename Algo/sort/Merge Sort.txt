Question Link: https://www.programiz.com/dsa/merge-sort

Question: Implement Merge Sort

Solution:
// C program for implementation of Merge sort
#include <stdio.h>

void merge(int arr[], int p, int q, int r) {
  int n1 = q - p + 1;
  int n2 = r - q;
  int L[n1], M[n2];
  for (int i = 0; i < n1; i++)
    L[i] = arr[p + i];
  for (int j = 0; j < n2; j++)
    M[j] = arr[q + 1 + j];
  int i, j, k;
  i = 0;
  j = 0;
  k = p;
  while (i < n1 && j < n2) {
    if (L[i] <= M[j]) {
      arr[k] = L[i];
      i++;
    } else {
      arr[k] = M[j];
      j++;
    }
    k++;
  }
  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }
  while (j < n2) {
    arr[k] = M[j];
    j++;
    k++;
  }
}
void mergeSort(int arr[], int low, int rear) {
  if (low < rear) {
    int mid = low + (rear - low) / 2;
    mergeSort(arr, low, mid);
    mergeSort(arr, mid + 1, rear);
    merge(arr, low, mid, rear);
  }
}
void display(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d\n", arr[i]);
}
int main()
{
    int n;
    printf("Enter the size:\n");
    scanf("%d",&n);
    int arr[n];
    int i;
    printf("Enter the elements to be sorted:\n");
    for (i = 0; i < n; i++)
        scanf("%d",&arr[i]);
    printf("Before sorting,\n");
    display(arr,n);
    mergeSort(arr, 0, n);
    printf("After sorting, \n");
    display(arr, n);
    return 0;
}
